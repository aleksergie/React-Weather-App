{"version":3,"sources":["components/card/card.component.jsx","redux/weather-forecast/weather-forecast.types.js","redux/weather-forecast/weather-forecast.actions.js","components/spinner/spinner.styles.js","components/spinner/spinner.component.jsx","components/week-container/week-container.component.jsx","App.styles.jsx","components/error-boundary/error-boundary.styles.jsx","components/error-boundary/error-boundary.component.jsx","App.js","redux/weather-forecast/weather.reducer.js","redux/root-reducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["moment","require","Card","day","newDate","Date","weekday","dt","setTime","imgURL","weather","id","celcium","parseInt","main","temp","className","format","Math","round","description","WeatherForecastActionTypes","GET_WEATHER_FORECAST","GET_WEATHER_FORECAST_SUCCESS","GET_WEATHER_FORECAST_FAILURE","fetchWeatherForecast","dispatch","type","navigator","geolocation","getCurrentPosition","position","longitude","coords","latitude","weatherApiLink","fetch","then","res","ok","json","data","dailyData","list","filter","reading","dt_txt","includes","payload","SpinnerOverlay","styled","div","SpinnerContainer","Spinner","connect","state","weatherForecast","loading","hasErrors","useEffect","Error","map","index","key","renderWeather","AppStyles","Title","h1","rotationSun","keyframes","IconHeader","i","ErrorImageOverlay","ErrorImageContainer","imageUrl","ErrorImageText","h2","ErrorBoundary","hasErrored","error","info","console","log","this","props","children","React","Component","App","initialState","weatherForecastReducer","action","rootReducer","combineReducers","middlewares","thunk","store","createStore","composeWithDevTools","applyMiddleware","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ac6291d0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.scss\";\r\nlet moment = require(\"moment\");\r\n\r\nconst Card = ({ day }) => {\r\n  let newDate = new Date();\r\n  const weekday = day.dt * 1000;\r\n  newDate.setTime(weekday);\r\n  const imgURL = \"owf owf-\" + day.weather[0].id + \" owf-5x icon\";\r\n  const celcium = parseInt(day.main.temp) - 273.15;\r\n\r\n  return (\r\n    <div className=\"card-list__container\">\r\n      <h1 className=\"card-list__heading\">{moment(newDate).format(\"dddd\")}</h1>\r\n      <p className=\"card-list__date\">{moment(newDate).format(\"MMMM Do\")}</p>\r\n      <h2 className=\"card-list__temperature\">{Math.round(celcium)} Â°C</h2>\r\n      <i className={imgURL}></i>\r\n      <p className=\"card-list__description\">{day.weather[0].description}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","const WeatherForecastActionTypes = {\r\n  GET_WEATHER_FORECAST: \"GET_WEATHER_FORECAST\",\r\n  GET_WEATHER_FORECAST_SUCCESS: \"GET_WEATHER_FORECAST_SUCCESS\",\r\n  GET_WEATHER_FORECAST_FAILURE: \"GET_WEATHER_FORECAST_FAILURE\",\r\n};\r\nexport default WeatherForecastActionTypes;\r\n","import WeatherForecastActionTypes from \"./weather-forecast.types\";\r\n\r\nexport const getWeatherForecast = () => ({\r\n  type: WeatherForecastActionTypes.GET_WEATHER_FORECAST,\r\n});\r\n\r\nexport const getWeatherForecastSuccess = (forecast) => ({\r\n  type: WeatherForecastActionTypes.GET_WEATHER_FORECAST_SUCCESS,\r\n  payload: forecast,\r\n});\r\n\r\nexport const getWeatherForecastFailure = () => ({\r\n  type: WeatherForecastActionTypes.GET_WEATHER_FORECAST_FAILURE,\r\n});\r\n\r\nexport const fetchWeatherForecast = () => {\r\n  return (dispatch) => {\r\n    dispatch(getWeatherForecast());\r\n\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      const openWeatherApiKey = \"e5865c0d174ba137684ce0f057d2b9d7\";\r\n      let longitude = position.coords.longitude;\r\n      let latitude = position.coords.latitude;\r\n      let weatherApiLink = `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${openWeatherApiKey}`;\r\n      fetch(weatherApiLink)\r\n        .then((res) => {\r\n          if (!res.ok) {\r\n            dispatch(getWeatherForecastFailure());\r\n          }\r\n          return res;\r\n        })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          const dailyData = data.list.filter((reading) =>\r\n            reading.dt_txt.includes(\"15:00:00\")\r\n          );\r\n          dispatch(getWeatherForecastSuccess(dailyData));\r\n        });\r\n    });\r\n  };\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const SpinnerOverlay = styled.div`\r\n  height: 60vh;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const SpinnerContainer = styled.div`\r\n  display: inline-block;\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 3px solid rgba(195, 195, 195, 0.6);\r\n  border-radius: 50%;\r\n  border-top-color: #636767;\r\n  animation: spin 1s ease-in-out infinite;\r\n  -webkit-animation: spin 1s ease-in-out infinite;\r\n  @keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { SpinnerOverlay, SpinnerContainer } from \"./spinner.styles\";\r\n\r\nconst Spinner = () => (\r\n  <SpinnerOverlay>\r\n    <SpinnerContainer />\r\n  </SpinnerOverlay>\r\n);\r\n\r\nexport default Spinner;\r\n","import React, { useEffect } from \"react\";\r\nimport \"./week-container.styles.scss\";\r\nimport Card from \"../card/card.component\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchWeatherForecast } from \"../../redux/weather-forecast/weather-forecast.actions\";\r\nimport Spinner from \"../../components/spinner/spinner.component\";\r\n\r\nconst WeekContainer = ({ dispatch, loading, hasErrors, weatherForecast }) => {\r\n  useEffect(() => {\r\n    dispatch(fetchWeatherForecast());\r\n  }, [dispatch]);\r\n\r\n  const renderWeather = () => {\r\n    if (loading) return <Spinner />;\r\n    if (hasErrors) throw new Error(\"Opss!\");\r\n\r\n    return weatherForecast.map((day, index) => <Card day={day} key={index} />);\r\n  };\r\n\r\n  return <div className=\"card-list\">{renderWeather()}</div>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  weatherForecast: state.weatherForecast.weatherForecast,\r\n  loading: state.weatherForecast.loading,\r\n  hasErrors: state.weatherForecast.hasErrors,\r\n});\r\n\r\nexport default connect(mapStateToProps)(WeekContainer);\r\n","import styled, { keyframes } from \"styled-components\";\r\n\r\nexport const AppStyles = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  padding-right: 10px;\r\n  color: rgb(201, 201, 201);\r\n  text-transform: uppercase;\r\n  font-size: 40px;\r\n  text-shadow: 0px 10px 4px rgba(0, 0, 0, 0.5);\r\n`;\r\n\r\nconst rotationSun = keyframes`\r\n  from {\r\n    transform: rotate(0deg);\r\n  }\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n`;\r\n\r\nexport const IconHeader = styled.i`\r\n  color: rgb(252, 219, 31);\r\n  text-shadow: none;\r\n  animation: ${rotationSun} 10s infinite linear;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ErrorImageOverlay = styled.div`\r\n  padding-top: 94px;\r\n\r\n  height: 60vh;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const ErrorImageContainer = styled.div`\r\n  display: inline-block;\r\n  background-image: ${({ imageUrl }) => `url(${imageUrl})`};\r\n  background-size: cover;\r\n  background-position: center;\r\n  width: 40vh;\r\n  height: 40vh;\r\n`;\r\n\r\nexport const ErrorImageText = styled.h2`\r\n  font-size: 34px;\r\n  color: #383838;\r\n`;\r\n","import React from \"react\";\r\nimport {\r\n  ErrorImageOverlay,\r\n  ErrorImageContainer,\r\n  ErrorImageText,\r\n} from \"./error-boundary.styles\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      hasErrored: false,\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { hasErrored: true };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    console.log(error);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasErrored) {\r\n      return (\r\n        <ErrorImageOverlay>\r\n          <ErrorImageContainer imageUrl=\"https://i.imgur.com/Q2BAOd2.png\" />\r\n          <ErrorImageText>Sorry, something went wrong :(</ErrorImageText>\r\n        </ErrorImageOverlay>\r\n      );\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from \"react\";\r\nimport WeekContainer from \"../src/components/week-container/week-container.component\";\r\nimport { AppStyles, Title, IconHeader } from \"./App.styles\";\r\nimport ErrorBoundary from \"./components/error-boundary/error-boundary.component\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <AppStyles>\r\n        <ErrorBoundary>\r\n          <Title>\r\n            Five Day Weather Forecast\r\n            <IconHeader className=\"owf owf-800-d\"></IconHeader>\r\n          </Title>\r\n          {<WeekContainer />}\r\n        </ErrorBoundary>\r\n      </AppStyles>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import WeatherForecastActionTypes from \"./weather-forecast.types\";\r\n\r\nconst initialState = {\r\n  weatherForecast: [],\r\n  loading: false,\r\n  hasErrors: false,\r\n};\r\n\r\nconst weatherForecastReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case WeatherForecastActionTypes.GET_WEATHER_FORECAST:\r\n      return { ...state, loading: true };\r\n    case WeatherForecastActionTypes.GET_WEATHER_FORECAST_SUCCESS:\r\n      return {\r\n        weatherForecast: action.payload,\r\n        loading: false,\r\n        hasErrors: false,\r\n      };\r\n    case WeatherForecastActionTypes.GET_WEATHER_FORECAST_FAILURE:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        hasErrors: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default weatherForecastReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport weatherForecastReducer from \"./weather-forecast/weather.reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  weatherForecast: weatherForecastReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { logger } from \"redux-logger\";\r\nimport rootReducer from \"./root-reducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst middlewares = [thunk];\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  middlewares.push(logger);\r\n}\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(...middlewares))\r\n);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./redux/store\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}